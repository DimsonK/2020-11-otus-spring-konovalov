DROP SEQUENCE IF EXISTS AUTHOR_SEQUENCE;
CREATE SEQUENCE AUTHOR_SEQUENCE START WITH 10;

DROP SEQUENCE IF EXISTS BOOK_SEQUENCE;
CREATE SEQUENCE BOOK_SEQUENCE START WITH 10;

DROP SEQUENCE IF EXISTS GENRE_SEQUENCE;
CREATE SEQUENCE GENRE_SEQUENCE START WITH 10;

DROP SEQUENCE IF EXISTS COMMENT_SEQUENCE;
CREATE SEQUENCE COMMENT_SEQUENCE START WITH 20;

DROP SEQUENCE IF EXISTS USER_SEQUENCE;
CREATE SEQUENCE USER_SEQUENCE START WITH 10;

DROP SEQUENCE IF EXISTS ROLE_SEQUENCE;
CREATE SEQUENCE ROLE_SEQUENCE START WITH 10;

DROP TABLE IF EXISTS GENRES CASCADE;
CREATE TABLE GENRES
(
    ID         BIGINT,
    GENRE_NAME VARCHAR(255),
    primary key (ID)
);

DROP TABLE IF EXISTS AUTHORS CASCADE;
CREATE TABLE AUTHORS
(
    ID          BIGINT,
    AUTHOR_NAME VARCHAR(255),
    primary key (ID)
);

DROP TABLE IF EXISTS BOOKS CASCADE;
CREATE TABLE BOOKS
(
    ID        BIGINT,
    AUTHOR_ID BIGINT references AUTHORS (ID) on update cascade,
    BOOK_NAME VARCHAR(255),
    RARS INT,
    ACCESS_LEVEL INT,
    primary key (ID)
);

DROP TABLE IF EXISTS COMMENTS CASCADE;
CREATE TABLE COMMENTS
(
    ID      BIGINT,
    BOOK_ID BIGINT references BOOKS (ID) on delete cascade,
    POST_DATE VARCHAR(10),
    AUTHOR_NAME VARCHAR(64),
    CONTENT VARCHAR(400),
    FAVORITE BOOLEAN,
    primary key (ID)
);

DROP TABLE IF EXISTS BOOK_GENRES CASCADE;
CREATE TABLE BOOK_GENRES
(
    BOOK_ID  BIGINT references BOOKS (ID) on delete cascade,
    GENRE_ID BIGINT references GENRES (ID),
    primary key (BOOK_ID, GENRE_ID)
);

DROP TABLE IF EXISTS USERS CASCADE;
CREATE TABLE USERS
(
    ID         BIGINT,
    USER_NAME VARCHAR(255),
    USER_PASSWORD VARCHAR(255),
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    AGE INT,
    ACCESS_LEVEL INT,
    primary key (ID)
);

DROP TABLE IF EXISTS ROLES CASCADE;
CREATE TABLE ROLES
(
    ID         BIGINT,
    ROLE_NAME VARCHAR(255),
    primary key (ID)
);

DROP TABLE IF EXISTS USER_ROLES CASCADE;
CREATE TABLE USER_ROLES
(
    USER_ID  BIGINT references USERS (ID) on delete cascade,
    ROLE_ID BIGINT references ROLES (ID),
    primary key (USER_ID, ROLE_ID)
);